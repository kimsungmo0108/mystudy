★ 해시 값 활용 예 ★
톰캣 서버 사이트 → tomcqt.zip 다운 → 로컬
→ 해커가 개입해서 변조된 파일이 다운로드 될 수 있다
→ 서버에 원본 파일과 같은지 검증이 필요하다
→ 해시 알고리즘에 따라서 (PGP, SHA512) 해시 값 참조
→ 우리 해시 값이랑 비교
→ $ certutil -hashfile "apache-tomcat-9.0.84.zip" SHA512 
→ 명령어로 해시 값 만들어서 비교하기

★ 로컬 변수와 클래스 변수 사용
int a;
static int b;

MyClass obj1 = new MyClass();
System.out.println(obj1.a);
System.out.println(MyClass.b);

double EPSILON = 0.00001;
★ System.out.println(Math.abs((d1 + d2) - (x + y)) < EPSILON); → 비교할 두 실수를 빼서 절댓값을 구한 뒤 개발자가 정해둔 범위보다 작으면 무시하자 ★

★ 연산자를 이용하여 짝수/홀수 알아내기 ★
System.out.println(57 % 2 == 0 ? "짝수" : "홀수");
System.out.println((57 & 0x1) == 0 ? "짝수" : "홀수");
(a == b ? c : d); → a와 b를 비교해서 참이면 c, 거짓이면 d를 실행

★ 메모리 절약
lang2 = lang2 | 0x80 → 비트 연산자를 이용해서 적은 메모리를 더 많은 true/false를 저장 할 수 있다
touch Hello.txt
chmod 755 Hello.txt
final int CSS           = 0x01; // 0000 0001
final int HTML          = 0x02; // 0000 0010
final int PHP           = 0x04; // 0000 0100
final int PYTHON        = 0x08; // 0000 1000
final int JAVASCRIPT    = 0x10; // 0001 0000
final int JAVA          = 0x20; // 0010 0000
final int CPP           = 0x40; // 0100 0000
final int C             = 0x80; // 1000 0000

★ 문자열을 숫자로 변환
String s = '12345';
int a = Integer.valueOf(s);
int b = Integer.parselnt(s);

후위 연산자
int a = 100;
→ int temp(임시 변수) = a; → a = a + 1 → b = temp → b = 100, a = 101
b = a; → a = a + 1
→ 항상 r-value를 먼저 실행한 후에 할당(=) 연산을 수행한다
int a = 100;
a++;
★ 추측 1 → 항상 r-value를 먼저 실행한다
→ int temp = a; → a = a + 1 → a = temp → 100

★ switch 문에서 변수 사용할 때 enum변수 사용
enum Level {
    GUEST, MEMBER, ADMIN
}
Level level = Level.MEMBER;           → enum 변수에는 그 타입에 정의된 값만 저장할 수 있다 → 안전한 코드 작성 가능

★ 리스트
ArrayList<String> list = new ArrayList<>();

★ Hello를 파일에 출력하기
OutputStream output = new FileoutputStream("test.txt");
PrintStream output2 = new PrintStream(output);
output2.pintln("Hello");
output2.close();
밥 a = new 밥(쌀);
밥그릇 b = new 밥그릇(a);
b.먹자("달걀");

★ 배열로 5명의 이름을 연속적으로 입력받기
String[] names = new String[5];
Scanner nameScan = new Scanner(System.in);
for (int i = 0; i < 5; i++) {
	System.out.println("5명의 이름을 적어주세요");
	names[i] = nameScan.nextLine();
      	// System.out.println("입력된 이름 : " + names[i]);
    }
for (String s : names) {
      	System.out.println("입력된 이름 : " + s);
    }
nameScan.close();

★ 입력 받기
java.io.InputStream keyboard = System.in;
java.util.Scanner keyboardScanner = new java.util.Scanner(keyboard);

System.out.print("이름? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("전화? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("이메일? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("나이? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("재직여부? ");
System.out.println(keyboardScanner.nextLine());
keyboardScanner.close();

★ 키보드로 입력받는 메소드 연습
java.io.InputStream in = System.in;
java.util.Scanner numScan = new Scanner(in);
int num = numScan.nextInt();
문자열=="abc"  ===>  if (num.equals("abc"));

★ 메소드(method) = 함수(function)
리턴값의타입 기능이름(값을 받을 변수 선언){
    명령문
}
int plus(int a, int b){
    int result;
    result = a + b;
    return result;
}
static void printMenu(){
}

★ 메소드 활용
main() → main()과 printMenu() 기능을 분리 → main()에서 printMenu()를 호출 → printMenu()에서 출력
printMenu() → 메뉴 목록 배열, ansi 명령, app 제목 → 공통 변수로 분리 

로컬 변수와 클래스 변수(static 변수)
class App{
	static int a; → 클래스 변수(필드) = static field
	void main(){
		int b; → 로컬 변수(local variable) 메소드 안에 선언된 변수, 메소드 실행될 때 생성되고 메소드의 실행이 끝나면 제거된다
	}
}

★ git bash에서 아규먼트 값 받아서 출력
$ javac -d build/classes/java/main src/main/java/com/eomcs/lang/ex07/Exam0610.java
$ java -classpath build/classes/java/main -Da=100 -Db=200 -Dc=300 com.eomcs.lang.ex07.Exam0610

String name = System.getProperty("name");
String s1 = System.getProperty("kor");
String s2 = System.getProperty("eng");
String s3 = System.getProperty("math");
$ javac -d build/classes/java/main src/main/java/com/eomcs/lang/ex07/Exam0620.java 
$ java -classpath build/classes/java/main -Dname=김성모 -Dkor=80 -Deng=50 -Dmath=10 com.eomcs.lang.ex07.Exam0620

★ 클래스 생성자 문법
Score s1 = new Score("홍길동", 100, 90, 85);
public Score(String name, int kor, int eng, int math) {
    this.name = name;
    this.kor = kor;
    this.eng = eng;
    this.math = math;
}

★ 레퍼런스 배열 생성
static Assignment[] assignments = new Assignment[3];

    Assignment assignment = new Assignment();
    assignment.title = Prompt.input("과제명? ");
    assignment.content = Prompt.input("내용? ");
    assignment.deadline = Prompt.input("제출 마감일? ");

    assignments[length] = assignment;
    length++;

★ 원하는 배열 삭제
    int index = Integer.parseInt(Prompt.input("번호? "));
    for (int i = index; i < (length - 1); i++) {
      assignments[i] = assignments[i + 1];
    }
    length--;
    assignments[length] = null;
    System.gc();  // garbage collector 한테 요청

★ 배열 인덱스 오류
    if (index < 0 || index >= length) {
      System.out.println("과제 번호가 유효하지 않습니다.");
      return;
    }

★ 배열 크기 늘리고 새로 생성
    if (length == assignments.length) {
      int oldSize = assignments.length;
      int newSize = oldSize + (oldSize / 2);

      // 이전 배열에 들어 있는 값을 새 배열에 복사
      Assignment[] arr = new Assignment[newSize];
      for (int i = 0; i < oldSize; i++) {
        arr[i] = assignments[i];
      }
      
      // 새 배열을 가리키도록 배열 레퍼런스를 변경
      assignments = arr;

      return;
    }

★ 클래스 로딩 시키기
Class.forName("com.eomcs.oop.ex03.Exam0650$A");

★ 클래스 필드 로딩 순서
  static class A {
    static int a = 7;
    static {
      System.out.println("A.static{}");
      a += B.b;
    }
  }
  static class B {
    static int b = 22;
    static {
      System.out.println("B.static{}");
      b += A.a;
    }
  }
    System.out.println(A.a); // ?
    System.out.println(B.b); // ?

★ Repository에 보관된 목록을 배열로 리턴 받기
방법1 
Board[] boards = new Board[this.objectRepository.size()];
this.objectRepository.toArray(boards);
방법2
Board[] boards = this.objectRepository.toArray(new Board[0]);

Arrays.copyOf(this.objects, this.length);

System.arraycopy(this.objects, index + 1, this.objects, index, this.length - (index + 1));

★ 큰 값 찾기
max = a > b ? a : b;
max = Math.max(a, b);

★ JVM이 외부에서 읽거나 외부로 내보낼 때 문자 규칙
Charset.defaultCharset(); → OS마다 다르다

★ 인스턴스에서 조회
s1.charAt(1);

★ 인스턴스랑 빼기 (비교할 때 사용)
s1.compareTo("Helli");

★ 인스턴스에 아규먼트 값이 들어있는지 여부 확인
s1.contatins("ll");

★ 문자열을 연결해서 새 문자열 만들기
String s2 = s1.concat(", world!"); → 기존 인스턴스의 값은 변경하지 않아서 새로운 변수에 담아야 한다(immutable)

★ 두 인스턴스 문자열이 같은지 비교
s1.equals("Hello");

★ 바이트 배열로 꺼낼 때
byte[] bytes = s3.getBytes();
→ 기본 인코딩 방식(UTF-8)으로 코드 값 저장
byte[] bytes = s3.getBytes("인코딩 방식") 
→ 이런 방식으로 여러 OS에서도 사용하자

★ 형식을 갖춘 문자열을 만들기
String s4 = String.format("%s님 반갑습니다", "홍길동");
→ 스트링 객체를 만들어서 객체 주소 반환

★ 구분자와 문자열들을 파라미터로 받아서 새 문자열을 만든다.
String s5 = String.join(":", "홍길동", "임꺽정", "유관순");

★ primitive 값을 문자열로 만든다.
String s6 = String.valueOf(true); // "true"
String s7 = String.valueOf(3.14f); // "3.14"
String s8 = String.valueOf(100); // "100"
Integer x2 = Integer.valueOf("44", 16); // 16진수라고 지정한다.

★ Integer 객체에서 int 값을 뽑아 낼 때 
int v1 = i2.intValue(); 

★int 변환
int v2 = Integer.parseInt("1280"); // String

★ 2진수, 8진수, 16진수로 변환
String s1 = Integer.toBinaryString(77);
String s2 = Integer.toOctalString(77);
String s3 = Integer.toHexString(77);

★ ValueOf()로 만들면 한 객체만 생성해서 사용(-128~127
Integer i1 = Integer.valueOf(127);
Integer i2 = Integer.valueOf(127);
Integer i3 = Integer.valueOf(127);
→ 인테저 객체를 만든다(-128~127)

★ Math 클래스
// => 절대값 계산
System.out.println(Math.abs(-200));
// => ceil() : 파라미터로 주어진 부동소수점이 바로 위 큰 정수 값을 리턴
// => floor() : 파라미터로 주어니 부동소수점의 바로 밑 작은 정수 값을 리턴
System.out.println(Math.ceil(3.28)); // 4
System.out.println(Math.floor(3.28)); // 3
System.out.println(Math.ceil(-3.28)); // -3
System.out.println(Math.floor(-3.28)); // -4
// => 2의 7승 값을 알고 싶을 때
System.out.println(Math.pow(2, 7));
// => 반올림하여 정수 값 리턴
System.out.println(Math.round(3.14));
System.out.println(Math.round(3.54));

★ 오늘 데이트 객체 만들어서 출력
Date d1 = new Date();
String str0 = d1.toString();
// 인스턴스 메서드 활용
System.out.println(d1.getYear() + 1900);
System.out.println(d1.getMonth() + 1);
System.out.println(d1.getDate());
// 스태틱 메서드 활용
long currMillis = System.currentTimeMillis();
// ★ 생성자 활용
java.sql.Date today = new java.sql.Date(currMillis);
String str = today.toString();
System.out.println(str);
→ YYYY-MM-DD로 출력
// ★ 스태틱 메서드 활용
java.sql.Date d = java.sql.Date.valueOf("2019-12-30");
System.out.println(d);
// println()에 문자열을 주지 않고 그냥 객체(의 주소)를 넘기면
// println() 내부에서 해당 객체의 toString()을 호출한 후에 
// 그 리턴 값을 출력한다.

★ 캘린더 클래스 ★
Calendar c = Calendar.getInstance();
System.out.println(c.get(5));
// 인스턴스 메서드 활용
System.out.println(c.get(1)); // 년도
System.out.println(c.get(2) + 1); // 월(0 ~ 11)
System.out.println(c.get(5)); // 일
System.out.println(c.get(7)); // 요일(1 ~ 7)
System.out.println(c.get(4)); // 그 달의 몇 번째 주
System.out.println(c.get(10)); // 시(0 ~ 11)
System.out.println(c.get(11)); // 시(24시)
System.out.println(c.get(12)); // 분
System.out.println(c.get(13)); // 초
System.out.println("-----------------------");
// 상수의 활용
System.out.println(c.get(Calendar.YEAR)); // 년도
System.out.println(c.get(Calendar.MONTH) + 1); // 월(0 ~ 11)
System.out.println(c.get(Calendar.DATE)); // 일
System.out.println(c.get(Calendar.DAY_OF_WEEK)); // 요일(1 ~ 7)
System.out.println(c.get(Calendar.WEEK_OF_MONTH)); // 그 달의 몇 번째 주
System.out.println(c.get(Calendar.HOUR)); // 시(0 ~ 11)
System.out.println(c.get(Calendar.HOUR_OF_DAY)); // 시(24시)
System.out.println(c.get(Calendar.MINUTE)); // 분
System.out.println(c.get(Calendar.SECOND)); // 초

★ Object 클래스와 instanceof
모든 클래스는 Object 클래스를 상속 받는다
Object 클래스의 주요 메서드
1) toString()
=> 클래스이름과 해시코드를 리턴한다.(클래스 정보 간단히 출력)
2) equals()
=> 같은 인스턴스인지 검사한다. 
3) hashCode()
=> 인스턴스를 식별하는 값을 리턴한다.
4) getClass()
=> 인스턴스의 클래스 정보를 리턴한다.
5) clone()
=> 인스턴스를 복제한 후 그 복제 인스턴스를 리턴한다.
6) finalize()
=> 가비지 컬렉터에 의해 메모리에서 해제되기 직전에 호출된다.

★ 해시 값 출력
obj.toString();

★ 인스턴스 값 비교, equals 메소드를 오버라이딩 해서 쓰기도 한다
str.equals(str1);

★ 해시 값(디지털 지문)
=> 특정 수학 공식(알고리즘)(MD4, MD5, SHA, PGP, CRC 등)에 따라 값을 계산한다.
=> 알고리즘이 좋을수록 같은 값을 가질 확률이 줄어든다
=> 알고리즘이 좋은 이유는 복잡하고, 변환속가 느리고, 결과값이 커지기 때문이다
Object에서 상속 받은 hashCode()는 인스턴스마다 고유의 4바이트 정수 값을 리턴한다.
=> 이 값은 toString()의 출력 값으로 사용된다.
=> System.out.println(Integer.toHexString(obj1.hashCode()));
해시 값 간단 = 정확도 다운 = 생성시간 빠름
해시 값 복잡 = 정확도 업 = 생성시간 느림

★ 클래스 정보 출력
getClass() : 객체타입?+클래스이름 반환
getClass().getName() : obj의 클래스 이름 반환

★ HashSet = Hash + Set ★
→ 값을 저장할 때 해시값을 계산하여 저장 위치를 알아낸다
→ 집합 방식으로 다룬다 → 중복 불가능
→ equals()와 hashCode()를 호출해서 중복 여부 검사
→ equals()와 hashCode()가 같다면 같은 객체로 판단하여 저장하지 않는다
→ 저장할 때 저장 위치는 hashCode()의 리턴 값을 사용하여 계산한다

★ HashMap() ★ 
→ 값을 저장할 key 객체의 해시코드를 이용하여 저장할 위치(인덱스)를 계산한다.
→ 값을 저장할 때 사용한 key 객체로 값을 찾아 꺼낸다.
→ System.out.println(map.get(k3));

★ getClass() ★
→ 레퍼런스를 통해서 클래스의 정보를 간단히 알 수 있다
→ System.out.println(classInfo.getName()); // 패키지명 + 바깥 클래스명 + 클래스명
→ System.out.println(new byte[10].getClass().getName()); //[B → 배열의 클래스 정보 출력
=	String obj1 = new String();
	Class classInfo = obj1.getClass();
	System.out.println(classInfo.getName());
★ Primitive 타입의 클래스 정보
	Class classInfo = byte.class;
	System.out.println(classInfo.getName());
	System.out.println(short.class.getName());
★ 배열 항목의 타입 정보를 가져온다.
	System.out.println(new int[10].getClass().getComponentType().getName());

★ 인스턴스를 복제할 수 있게 하려면 ★
→ Object에서 제공하는 ★clone()을 호출할 수 있어야 한다.
→ 그런데 clone()의 접근 범위가 protected 이라서 같은 패키지의 멤버이거나 서브 클래스가 아니면 호출할 수 없다.
해결
→ Object에서 상속 받은 clone()을 오버라이딩 한다.
→ 다른 패키지의 멤버가 호출하려면 public 으로 접근 제어의 범위를 넓혀야 한다.
→ 오버라이딩 할 클래스 옆에 implements Cloneable를 붙여서 허락을 받는 효과(표시)
public Score clone() throws CloneNotSupportedException {
	return (Score) super.clone();
}
→ Object의 clone() 메서드는 Heap의 존재하는 인스턴스 변수들을 그대로 복제한다.

★ shallow copy ★
→ JVM은 인스턴스를 새 메모리에 그대로 복제
→ 객체(Car)가 포함하는 의존 객체(Engine)는 복제하지 않는다

★ deep copy ★
→ 객체(Car)가 포함하는 의존 객체(Engine)도 새 메모리에 복제한다
→ 의존 객체도 clone()을 오버라이딩을 하고 복제 안에서 복제를 하게끔 설계
	Car copy = (Car) super.clone();
	copy.engine = this.engine.clone();
	return copy;

문자열 결합
"aaa" + obj → 문자열과 레퍼런스 결합
→ "aaa" + "obj.toString() 리턴 값"
→ "aaa리턴값"
  
★ String 클래스
Heap
String s1 = new String("Hello");
String s2 = new String("Hello");
→ new 명령으로는 Heap에 새로운 인스턴스를 만들기 때문에 다른 객체가 생성
★ 상수풀(Constant pool)
String s3 = "Hello";
String s4 = "Hello";
→ 레퍼런스한테 바로 값을 넣으면 상수풀(Constant pool)이라는 곳에 생성된다
→ 상수풀에 같은 값이 있다면 새로운 인스턴스를 만들지 않고 같은 값에 인스턴스 주소를 리턴한다
String s2 = s1.intern();
→ String 객체에 들어 있는 문자열과 동일한 문자열을 갖고 있는 String 객체를 상수풀에서 찾는다.
→ 있으면 그 String 객체의 주소를 리턴한다. 없으면 상수풀에 String 객체를 생성한 후 그 주소를 리턴한다.

★ StringBuffer와 StringBuilder 차이점
→ 여러 스레드가 작업해야 한다면 StringBuffer를 사용하고 한 스레드만 작업해야 한다면 StringBuilder를 사용한다
StringBuffer
→ 여러 스레드가 작업 할때 하나의 스레드만 작업할 수 있게 (동기화 지원)
→ StringBuilder보다 작업시간이 느리다 하지만 작업이 안정적이다
StringBuilder
→ 여러 스레드가 작업 할때 다른 스레드가 작업 권한을 가지게 된다 (동기화 비지원)
→ StringBuffer보다 작업시간이 빠르다 하지만 작업 권한을 막지 못해서 작업이 안정적이지 않다
→ 여러 스레드가 작업해야 한다면 StringBuffer를 사용하고 한 스레드만 작업해야 한다면 StringBuilder를 사용한다

★ String 기타 메소드
String.valueOf(); 메소드
String s2 = String.valueOf(true);
String s4 = String.valueOf(100L); // 100L => "100"
String s7 = String.valueOf('가');
→ 리터럴 값을 문자열로 만들어준다
-----------------------------------------------------------------
String.format(); 메소드
String s1 = String.format("%s,%s,%s,%s,%s", arr[0], arr[1], arr[2], arr[3], arr[4]);
System.out.println(s1);
String s2 = String.format("%s,%s,%s,%s,%s", arr);
System.out.println(s2);
→ 문자열 결합
------------------------------------------------------------------
String.join(); 메소드
String s3 = String.join(",", arr[0], arr[1], arr[2], arr[3], arr[4]);
System.out.println(s3);
String s4 = String.join(",", arr);
System.out.println(s4);
→ 문자열 사이에 끼워넣기
-----------------------------------------------------------------
Arrays.copyOfRange(); 메소드
String[] arr2 = Arrays.copyOfRange(arr, 2, 4);
for (String s : arr2) {
      System.out.println(s);
}
→ 배열에 특정 범위의 항목을 복사하기
-----------------------------------------------------------------
★ 문자 사이에 문자열 받기
java.util.Scanner sc = new java.util.Scanner(System.in);
sc.useDelimiter(":");
-----------------------------------------------------------------


