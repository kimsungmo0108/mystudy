★ 로컬 변수와 클래스 변수 사용
int a;
static int b;

MyClass obj1 = new MyClass();
System.out.println(obj1.a);
System.out.println(MyClass.b);

double EPSILON = 0.00001;
★ System.out.println(Math.abs((d1 + d2) - (x + y)) < EPSILON); → 비교할 두 실수를 빼서 절댓값을 구한 뒤 개발자가 정해둔 범위보다 작으면 무시하자 ★

★ 연산자를 이용하여 짝수/홀수 알아내기 ★
System.out.println(57 % 2 == 0 ? "짝수" : "홀수");
System.out.println((57 & 0x1) == 0 ? "짝수" : "홀수");
(a == b ? c : d); → a와 b를 비교해서 참이면 c, 거짓이면 d를 실행

★ 메모리 절약
lang2 = lang2 | 0x80 → 비트 연산자를 이용해서 적은 메모리를 더 많은 true/false를 저장 할 수 있다
touch Hello.txt
chmod 755 Hello.txt
final int CSS           = 0x01; // 0000 0001
final int HTML          = 0x02; // 0000 0010
final int PHP           = 0x04; // 0000 0100
final int PYTHON        = 0x08; // 0000 1000
final int JAVASCRIPT    = 0x10; // 0001 0000
final int JAVA          = 0x20; // 0010 0000
final int CPP           = 0x40; // 0100 0000
final int C             = 0x80; // 1000 0000

★ 문자열을 숫자로 변환
String s = '12345';
int a = Integer.valueOf(s);
int b = Integer.parselnt(s);

후위 연산자
int a = 100;
→ int temp(임시 변수) = a; → a = a + 1 → b = temp → b = 100, a = 101
b = a; → a = a + 1
→ 항상 r-value를 먼저 실행한 후에 할당(=) 연산을 수행한다
int a = 100;
a++;
★ 추측 1 → 항상 r-value를 먼저 실행한다
→ int temp = a; → a = a + 1 → a = temp → 100

★ switch 문에서 변수 사용할 때 enum변수 사용
enum Level {
    GUEST, MEMBER, ADMIN
}
Level level = Level.MEMBER;           → enum 변수에는 그 타입에 정의된 값만 저장할 수 있다 → 안전한 코드 작성 가능

★ 리스트
ArrayList<String> list = new ArrayList<>();

★ Hello를 파일에 출력하기
OutputStream output = new FileoutputStream("test.txt");
PrintStream output2 = new PrintStream(output);
output2.pintln("Hello");
output2.close();
밥 a = new 밥(쌀);
밥그릇 b = new 밥그릇(a);
b.먹자("달걀");

★ 배열로 5명의 이름을 연속적으로 입력받기
String[] names = new String[5];
Scanner nameScan = new Scanner(System.in);
for (int i = 0; i < 5; i++) {
	System.out.println("5명의 이름을 적어주세요");
	names[i] = nameScan.nextLine();
      	// System.out.println("입력된 이름 : " + names[i]);
    }
for (String s : names) {
      	System.out.println("입력된 이름 : " + s);
    }
nameScan.close();

★ 입력 받기
java.io.InputStream keyboard = System.in;
java.util.Scanner keyboardScanner = new java.util.Scanner(keyboard);

System.out.print("이름? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("전화? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("이메일? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("나이? ");
System.out.println(keyboardScanner.nextLine());
System.out.print("재직여부? ");
System.out.println(keyboardScanner.nextLine());
keyboardScanner.close();

★ 키보드로 입력받는 메소드 연습
java.io.InputStream in = System.in;
java.util.Scanner numScan = new Scanner(in);
int num = numScan.nextInt();
문자열=="abc"  ===>  if (num.equals("abc"));

★ 메소드(method) = 함수(function)
리턴값의타입 기능이름(값을 받을 변수 선언){
    명령문
}
int plus(int a, int b){
    int result;
    result = a + b;
    return result;
}
static void printMenu(){
}

★ 메소드 활용
main() → main()과 printMenu() 기능을 분리 → main()에서 printMenu()를 호출 → printMenu()에서 출력
printMenu() → 메뉴 목록 배열, ansi 명령, app 제목 → 공통 변수로 분리 

로컬 변수와 클래스 변수(static 변수)
class App{
	static int a; → 클래스 변수(필드) = static field
	void main(){
		int b; → 로컬 변수(local variable) 메소드 안에 선언된 변수, 메소드 실행될 때 생성되고 메소드의 실행이 끝나면 제거된다
	}
}

★ git bash에서 아규먼트 값 받아서 출력
$ javac -d build/classes/java/main src/main/java/com/eomcs/lang/ex07/Exam0610.java
$ java -classpath build/classes/java/main -Da=100 -Db=200 -Dc=300 com.eomcs.lang.ex07.Exam0610

String name = System.getProperty("name");
String s1 = System.getProperty("kor");
String s2 = System.getProperty("eng");
String s3 = System.getProperty("math");
$ javac -d build/classes/java/main src/main/java/com/eomcs/lang/ex07/Exam0620.java 
$ java -classpath build/classes/java/main -Dname=김성모 -Dkor=80 -Deng=50 -Dmath=10 com.eomcs.lang.ex07.Exam0620

★ 클래스 생성자 문법
Score s1 = new Score("홍길동", 100, 90, 85);
public Score(String name, int kor, int eng, int math) {
    this.name = name;
    this.kor = kor;
    this.eng = eng;
    this.math = math;
}

★ 레퍼런스 배열 생성
static Assignment[] assignments = new Assignment[3];

    Assignment assignment = new Assignment();
    assignment.title = Prompt.input("과제명? ");
    assignment.content = Prompt.input("내용? ");
    assignment.deadline = Prompt.input("제출 마감일? ");

    assignments[length] = assignment;
    length++;

★ 원하는 배열 삭제
    int index = Integer.parseInt(Prompt.input("번호? "));
    for (int i = index; i < (length - 1); i++) {
      assignments[i] = assignments[i + 1];
    }
    length--;
    assignments[length] = null;
    System.gc();  // garbage collector 한테 요청

★ 배열 인덱스 오류
    if (index < 0 || index >= length) {
      System.out.println("과제 번호가 유효하지 않습니다.");
      return;
    }

★ 배열 크기 늘리고 새로 생성
    if (length == assignments.length) {
      int oldSize = assignments.length;
      int newSize = oldSize + (oldSize / 2);

      // 이전 배열에 들어 있는 값을 새 배열에 복사
      Assignment[] arr = new Assignment[newSize];
      for (int i = 0; i < oldSize; i++) {
        arr[i] = assignments[i];
      }
      
      // 새 배열을 가리키도록 배열 레퍼런스를 변경
      assignments = arr;

      return;
    }

★ 클래스 로딩 시키기
Class.forName("com.eomcs.oop.ex03.Exam0650$A");

★ 클래스 필드 로딩 순서
  static class A {
    static int a = 7;
    static {
      System.out.println("A.static{}");
      a += B.b;
    }
  }
  static class B {
    static int b = 22;
    static {
      System.out.println("B.static{}");
      b += A.a;
    }
  }
    System.out.println(A.a); // ?
    System.out.println(B.b); // ?

★ Repository에 보관된 목록을 배열로 리턴 받기
방법1 
Board[] boards = new Board[this.objectRepository.size()];
this.objectRepository.toArray(boards);
방법2
Board[] boards = this.objectRepository.toArray(new Board[0]);

Arrays.copyOf(this.objects, this.length);

System.arraycopy(this.objects, index + 1, this.objects, index, this.length - (index + 1));