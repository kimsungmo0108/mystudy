#SQLD 자격증 공부

1. 데이터 모델링의 이해
-----------------------------------------------------------------
데이터 모델링이란?
- 정보시스템을 구축하기 위한 데이터 관점의 업무 분석 기법
- 현실 세계의 데이터(what)를 약속된 표기법으로 표현하는 과정
- 데이터베이스를 구축하기 위한 분석 및 설계의 과정

데이터베이스 싀카 구조 3단계
- 외부스키마(External Schema)
- 개념스키마(Conceptual Schema)
- 내부스키마(Internal Schema)

ERD 작성 순서
1. 엔티티를 그린다.
2. 엔티티를 적절하게 배치한다.
3. 엔티티 간 관계를 설정한다.
4. 관계명을 기술한다.
5. 관계의 참여도를 기술한다.
6. 관계의 필수여부를 기술한다.

엔티티의 특징
- 반드시 해당 업무에서 필요하다고 관리하고자 하는 정보이어야 한다.(예 : 환자, 토익의 응시횟수, 등)
- 유일한 식별자에 의해 식별이 가능해야 한다.
- 영속적으로 존재하는 인스턴스의 집합이어야 한다.
- 엔티티는 업무 프로세스에 의해 이용되어야 한다.
- 엔티티는 반드시 속성이 있어야 한다.
- 엔티티는 다른 엔티티와 최소 한 개 이상의 관계가 있어야 한다.

발생 시점에 따른 엔티티 분류
- 기본, 키 엔티티(Fundamental Entity, Key Entity)
- 중심 엔티티(Main Entity)
- 행위 엔티티(Active Entity)

엔티티, 인스턴스, 속성, 속성값의 관계
- 한 개의 엔티티는 두 개이상의 인스턴스 집합이어야 한다.
- 한 개의 엔티티는 두 개이상의 속성을 갖는다.
- 한 개의 속성은 한 개의 속성값을 갖는다.

속성의 특성에 따른 분류
- 기본속성
- 설계속성
- 파생속성

도메인
- 각 속성은 가질 수 있는 값의 범위가 있는데 이를 그 속성의 도메인(Domain)이라 하며, 엔티티 내에서 속성에 대한 데이터 타입과 크기 그리고 제약사항을 지정하는 것이다.

속성의 명칭 부여
- 해당 업무에서 사용하는 이름을 부여한다.
- 서술식 속성명은 사용하지 않는다.
- 약어 사용은 가급적 제한한다.
- 전체 데이터 모델에서 유일성을 확보하는 것이 좋다.

관계의 표기법
- 관계명(Membership) : 관계의 이름
- 관계차수(Cardinality) : 1:1, 1:M, M:N
- 관계선택사양(Optionality) : 필수 관계, 선택 관계

식별자의 종류
- 엔티티 내에서 대표성을 가지는가에 따라 주식별자(Primary Identifier)와 보조식별자(Alternate Identifier)로 구분
- 엔티티 내에서 스스로 생성되었는지 여부에 따라 내부식별자와 외부식별자(Foreign Identifier)로 구분
- 단일 속성으로 식별이 되는가에 따라 단일식별자(Sigle Identifier)와 복합식별자(Composit Identifier)로 구분
- 원래 업무적으로 의미가 있던 식별자 속성을 대체하여 일련번호와 같이 새롭게 만든 식별자를 구분하기 위해 본질식별자와 인조식별자로 구분

주식별자의특징
- 유일성 : 주식별자에 의해 엔티티 내에 모든 인스턴스들을 유일하게 구분함
- 최소성 : 주식별자를 구성하는 속성의 수는 유일성을 만족하는 최소의 수가 되어야 함
- 불변성 : 주식별자가 한번 특정 엔티티에 지정되면 그 식별자의 값은 변하지 않아야 함
- 존재성 : 주식별자가 지정되면 반드시 데이터 값이 존재해야 함(NULL 허용 안됨)

정규형
제1정규형 : 모든 속성은 반드시 하나의 값을 가져야 한다.
제2정규형 : 엔티티의 일반속성은 주식별자 전체에 종속이어야 한다.
제3정규형 : 엔티티의 일반속성 간에는 서로 종속적이지 않다.

1차 정규화
- 중복속성에 대한 분리가 1차 정규화의 대상이 되며, 로우단위의 중복도 1차 정규화의 대상이 되지만 칼럼 단위로 중복이 되는 경우도 1차 정규화의 대상이다.

널(NULL)의 특성
- 널 값은 아직 정의되지 않은 값으로 0 또는 공백과 다르다. 0은 숫자이고, 공백은 하나의 문자이다.
- 테이블을 생성할 때 NOT NULL 또는 PRIMARY KEY로 정의되지 않은 모든 데이터 유형은 널 값을 포함할 수 있다.
- 널 값을 포함하는 연산의 경우 결괏값도 널 값이다. 모르는 데이터에 숫자를 더하거나 빼도 결과는 마찬가지로 모르는 데이터인 것과 같다.
- 결괏값을 NULL이 아닌 다른 값을 얻고자 할 때 NVL/ISNULL 함수를 사용한다. 널 값의 대상이 숫자 유형 데이터인 경우는 주로 0으로, 문자 유형 데이터인 경우는 공백보다는 'X' 같이 해당 시스템에서 의미 없는 문자로 바꾸는 경우가 많다.

2. SQL 기본 및 활용
-----------------------------------------------------------------
데이터 제어어(DCL : Data Control Languege)
- 데이터베이스에 접근하고 객체들을 사용하도록 권한을 주고 회수하는 명령어

조회
SELECT[ALL/DISTINCT]
  보고 싶은 컬럼명, 보고 싶은 컬럼명, ...;
FROM
  해당 컬럼들이 있는 테이블명;
- ALL : Default 옵션이므로 별도로 표시하지 않아도 된다. 중복된 데이터가 있어도 모두 출력한다.
- DISTINCT : 중복된 데이터가 있는 경우 1건으로 처리해서 출력한다.

WHERE 절은 FROM 절 다음에 위치하며, 조건식은 아래 내용으로 구성된다.
- 컬럼(Column)명(보통 조건식의 좌측에 위치)
- 비교 연산자
- 문자, 숫자, 표현식(보통 조건식의 우측에 위치)
- 비교 컬럼명(JOIN 사용시)

NULL의 연산
- NULL 값과의 연산(+, -, *, / 등)은 NULL 값을 리턴
- NULL 값과의 비교연산(=, >, >=, <, <=)은 거짓(FALSE)을 리턴
- 특정 값보다 크다, 적다라고 표현할 수 없음

부정 비교 연산자
- != : 같지 않다.
- ^= : 같지 않다.
- <> : 같지 않다.(ISO 표준, 모든 운영체제에서 사용 가능)
- NOT 컬럼명 = : ~와 같지 않다.
- NOT 컬럼명 > : ~보다 크지 않다.

GROUP BY 절과 HAVING 절의 특성
- GROUP BY 절을 통해 소그룹별 기준을 정한 후, SELECT 절에 집계 함수를 사용한다.
- 집계 함수의 통계 정보는 NULL 값을 가진 행을 제외하고 수행한다.
- GROUP BY 절에서는 SELECT 절과는 달리 ALIAS 명을 사용할 수 없다.
- 집계 함수는 WHERE 절에는 올 수 없다.(집계 함수를 사용할 수 있는 GROUP BY 절보다 WHERE 절이 먼저 수행된다.)
- WHERE 절은 전체 데이터를 GROUP으로 나누기 전에 행들을 미리 제거한다.
- HAVING 절은 GROUP BY 절의 기준 항목이나 소그룹의 집계 함수를 이용한 조건을 표시할 수 있다.
- GROUP BY 절에 의한 소그룹별로 만들어진 집계 데이터 중, HAVING 절에서 제한 조건을 두어 조건을 만족하는 내용만 출력한다.
- HAVING 절은 일반적으로 GROUP BY 절 뒤에 위치한다.

DUAL 테이블의 특성
- 사용자 SYS가 소유하며 모든 사용자가 엑세스 가능한 테이블이다.
- SELECET ~ FROM ~ 의 형식을 갖추기 위한 일종의 DUMMY 테이블이다.
- DUMMY라는 문자열 유형의 컬럼에 'X'라는 값이 들어 있는 행을 1건 포함하고 있다.

NULL 관련 함수
- NVL(표현식1, 표현식2) 오라클 함수 ISNULL(표현식1, 표현식2)
- SQL Server 함수 NULLIF(표현식1, 표현식2) COALESCE(표현식1, 표현식2)

ORDER BY 문장
  SELECT 컬럼명 [ALIAS명]
  FROM 테이블명
  [WHERE 조건식]
  [GROUP BY 컬럼이나 표현식]
  [HAVING 그룹조건식]
  [ORDER BY 컬럼이나 표현식 [ASC 또는 DESC]]
- ASC(Ascending) : 조회한 데이터를 오름차순으로 정렬한다. (기본 값이므로 생략 가능)
- DESC(Descending) : 조회한 데이터를 내림차순으로 정렬한다.

GROUP BY 문장
  SELECT [DISTINCT] 컬럼명 [ALIAS명]
  FROM 테이블명
  [WHERE 조건식]
  [GROUP BY 컬럼이나 표현식]
  [HAVING 그룹조건식]

NULL 포함 연산의 결과
- NULL + 2, 2 + NULL, NULL - 2, 2 - NULL, NULL * 2, 2 * NULL, NULL  / 2, 2 / NULL 의 결과는 모두 NULL이다.

ORDER BY 절 특징
- 기본적인 정렬 순서는 오름차순(ASC)이다.
- 숫자형 데이터 타입은 오름차순으로 정렬했을 경우에 가장 작은 값부터 출력된다.
- 날짜형 데이터 타입은 오름차순으로 정렬했을 경우 날짜 값이 가장 이른값이 먼저 출력된다
  - 예를 들어 '01-JAN-2012'는 '01-SEP-2012'보다 먼저 출력된다.
- 오라클에서는 NULL 값을 가장 큰 값으로 간주하여 오름차순으로 졍렬했을 경우에는 가장 마지막에, 내림차순으로 정렬했을 경우에는 가장 먼저 위치한다.
- 반면, SQL Server에서는 NULL 값을 가장 작은 값으로 간주하여 오름차순으로 정렬했을 경우에는 가장 먼저, 내림차순으로 정렬했을 경우에는 가장 마지막에 위치한다.

SELECT 문장 실행 순서
- 발췌 대상 테이블을 참조한다. (FROM)
- 발췌 대상 데이터가 아닌 것은 제거한다. (WHERE)
- 행들을 소그룹화한다. (GROUP BY)
- 그루핑된 값의 조건에 맞는 것만을 출력한다. (HAVING)
- 데이터 값을 출력/계산한다. (SELECT)
- 데이터를 정렬한다. (ORDER BY)

EQUI JOIN 문장
SELECT 테이블1.컬럼,
  테이블2.컬럼, ...
FROM 테이블1, 테이블2
WHERE 테이블1.컬럼 = 테이블2.컬럼;
=> WHERE 절에 JOIN 조건을 넣는다.

ANSI/ISO SQL 표준
EQUI JOIN 문장
SELECT 테이블1.컬럼,
  테이블2.컬럼 ...
FROM 테이블1 INNER JOIN 테이블2 ON 테이블1.컬럼 = 테이블2.컬럼;
=> ON 절에 JOIN 조건을 넣는다.
